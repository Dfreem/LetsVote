@page "/game"
@using LetsVote.Client.Components
@using LetsVote.Client.Services.Toast
@using LetsVote.Shared.DTO
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _nav
@inject IToastService _toast

<PageTitle>Tug of War Game</PageTitle>

<div class="container text-center">
    <h1>Voting Game</h1>

    <!-- Game Area with Team Images -->
    <div class="game-area my-4 position-relative">
        <!-- Team A on the left -->
        <div class="team team-a" style="left:@(50 + PositionOffset - 25)%;">
            <img src="images/teamA.png" alt="Team A" class="team-image img-fluid" />
            <p>Team A: @TeamAVotes</p>
        </div>

        <!-- Rope in the center -->
        <div class="rope" style="left:@(50 + PositionOffset)%;">
            <img src="images/rope.png" alt="Rope" class="rope-image img-fluid" />
        </div>

        <!-- Team B on the right -->
        <div class="team team-b" style="left:@(50 + PositionOffset + 25)%;">
            <img src="images/teamB.png" alt="Team B" class="team-image img-fluid" />
            <p>Team B: @TeamBVotes</p>
        </div>
    </div>

    <!-- Monster Attack Section -->
    <div class="monster-area">
        @if (!IsStunned && !IsMonsterDefeated)
        {
            <div class="monster-image" style="left:@(GetMonsterPosition())%;">
                <img src="@MonsterImage" alt="Monster" />
                <p>@MonsterMessage</p>
            </div>

            @if (ShowDecoyMonster)
            {
                <div class="monster-decoy" style="left:@(GetDecoyPosition())%;">
                    <img src="images/monsterf1.png" alt="Decoy Monster" />
                </div>
            }
        }
        else if (IsStunned)
        {
            <p>You're stunned! Wait for a few seconds...</p>
        }
        else if (IsMonsterDefeated)
        {
            <p>@SuccessMessage</p>
        }
    </div>

    <!-- Monster Fight Button Area -->
    <div class="button-area my-4">
        <button class="btn btn-danger" @onclick='() => ButtonClicked("A")' disabled="@IsStunned">A</button>
        <button class="btn btn-warning" @onclick='() => ButtonClicked("B")' disabled="@IsStunned">B</button>
        <button class="btn btn-success" @onclick='() => ButtonClicked("C")' disabled="@IsStunned">C</button>
    </div>

    <!-- Display the Vote Counts -->
    <div class="vote-counts my-4">
        <p>Team A Votes: @TeamAVotes</p>
        <p>Team B Votes: @TeamBVotes</p>
    </div>
</div>

@code {
    // SignalR Hub connection
    private HubConnection? _gameHubConnection;

    // Vote counts
    private int TeamAVotes { get; set; }
    private int TeamBVotes { get; set; }

    // Player's team selection
    private string PlayerTeam { get; set; } = "A";

    // Monster variables
    private string MonsterImage { get; set; } = "images/monster.png"; // Default monster
    private string[] MonsterImages = { "images/monster.png", "images/monster2.png" };
    private string CorrectButton;
    private string MonsterMessage;
    private bool IsMonsterDefeated = false;
    private bool IsStunned = false;
    private int StunDuration = 3000; // 3 seconds stun duration
    private string SuccessMessage { get; set; } = string.Empty;

    // Decoy monster variables
    private bool ShowDecoyMonster { get; set; } = false;
    private string DecoyPosition; // To randomize the decoy monster position

    // Calculate vote difference and shift
    private int VoteDifference => TeamAVotes - TeamBVotes;
    private double PositionOffset => VoteDifference * -0.5; // Reverse direction

    protected override async Task OnInitializedAsync()
    {
        // Connect to SignalR hub
        var gameStateUrl = _nav.ToAbsoluteUri("/tug-game");
        _gameHubConnection = new HubConnectionBuilder()
            .WithUrl(gameStateUrl)
            .WithAutomaticReconnect()
            .Build();

        _gameHubConnection.On<TugGameEventArgs>("RecieveGameState", OnGameStateUpdate);

        try
        {
            await _gameHubConnection.StartAsync();
            await _gameHubConnection.InvokeAsync("AddToListenerGroup");

            // Start spawning monsters
            StartMonsterSpawn();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Connection failed: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }

    private void OnGameStateUpdate(TugGameEventArgs args)
    {
        TeamAVotes = args.TeamA;
        TeamBVotes = args.TeamB;
        InvokeAsync(StateHasChanged);
    }

    // Start the monster spawn loop
    private void StartMonsterSpawn()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(5000); // Spawn new monster every 5 seconds
                RandomizeMonster();
                RandomizeDecoy();
                IsMonsterDefeated = false;
                IsStunned = false;
                SuccessMessage = string.Empty;
                InvokeAsync(StateHasChanged);
            }
        });
    }

    // Randomize the monster image and placement
    private void RandomizeMonster()
    {
        var buttons = new[] { "A", "B", "C" };
        CorrectButton = buttons[new Random().Next(0, buttons.Length)];
        MonsterImage = MonsterImages[new Random().Next(0, MonsterImages.Length)];
        MonsterMessage = $"A monster appears above button {CorrectButton}!";
    }

    // Randomize the decoy monster appearance and position
    private void RandomizeDecoy()
    {
        ShowDecoyMonster = new Random().Next(0, 3) == 0; // 33% chance to show decoy monster
        DecoyPosition = new Random().Next(10, 90).ToString(); // Random position between 10% and 90%
    }

    // Calculate monster position above the correct button
    private double GetMonsterPosition()
    {
        return CorrectButton switch
        {
            "A" => 20, // Position above button A
            "B" => 50, // Position above button B
            "C" => 80, // Position above button C
            _ => 50    // Default to center
        };
    }

    // Calculate decoy monster position (random)
    private double GetDecoyPosition()
    {
        return double.Parse(DecoyPosition);
    }

    // Handle button click to fight the monster
    private async Task ButtonClicked(string button)
    {
        if (button == CorrectButton)
        {
            // Correct button clicked, monster defeated
            IsMonsterDefeated = true;
            SuccessMessage = "You successfully struck the monster and got to the ballot box! That's a vote for your candidate!";
            await SubmitVote();
        }
        else
        {
            // Wrong button clicked, player is stunned
            IsStunned = true;
            await Task.Delay(StunDuration);
            IsStunned = false;
        }
        InvokeAsync(StateHasChanged);
    }

    // Submit a vote after monster is defeated
    private async Task SubmitVote()
    {
        if (_gameHubConnection is not null)
        {
            if (PlayerTeam == "A")
            {
                await _gameHubConnection.InvokeAsync("TugLeft");
            }
            else if (PlayerTeam == "B")
            {
                await _gameHubConnection.InvokeAsync("TugRight");
            }
        }
    }

    public void Dispose()
    {
        if (_gameHubConnection is not null)
        {
            _gameHubConnection.DisposeAsync();
        }
    }
}

<!-- Styles -->
<style>
    .monster-area {
        margin-top: 2rem;
        height: 200px;
        position: relative;
    }

    .monster-image, .monster-decoy {
        position: absolute;
        top: -50px; /* Position monster above the buttons */
        transition: left 0.5s ease-in-out; /* Smooth transition for monster movement */
    }

        .monster-image img, .monster-decoy img {
            max-width: 80px;
        }

    .button-area {
        display: flex;
        justify-content: space-around;
    }

    .vote-counts {
        font-size: 1.5rem;
    }
</style>

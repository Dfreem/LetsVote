@page "/game"
@using LetsVote.Client.Components
@using LetsVote.Client.Services.Toast
@using LetsVote.Shared.DTO
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@inject NavigationManager _nav
@inject IToastService _toast

<PageTitle>Tug of War Game</PageTitle>

<div class="container text-center">
    <h1>Tug of War Game</h1>

    <!-- Game Area with Team Images -->
    <div class="game-area my-4 position-relative">
        <!-- Team A on the left, facing right 
        <div class="team team-a" style="left:@(PositionOffset -25)%;">
            <img src="images/teamA.png" alt="Team A" class="team-image img-fluid team-a-image" />
            <h3>Team A</h3>
        </div>

        -- Rope will be in the center, positioned dynamically with the two teams based on vote difference 
        <div class="rope" style="left:@(PositionOffset + 25)%;">
            <img src="images/rope.png" alt="Rope" class="rope-image img-fluid" />
        </div>

        -- Team B on the right, facing left 
        <div class="team team-b" style="left:@(PositionOffset + 50)%;">
            <img src="images/teamB.png" alt="Team B" class="team-image img-fluid team-b-image" />
            <h3>Team B</h3>
        </div> -->
    </div>

    <!-- Voting Buttons -->
    <div class="voting-buttons my-4">
        <button class="btn btn-danger btn-lg" @onclick="VoteTeamA">Vote for Team A</button>
        <button class="btn btn-primary btn-lg" @onclick="VoteTeamB">Vote for Team B</button>
    </div>

    <!-- Display the Vote Counts -->
    <div class="vote-counts my-4">
        <p>Team A Votes: @TeamAVotes</p>
        <p>Team B Votes: @TeamBVotes</p>
    </div>
</div>

@code {
    // HubConnection for SignalR communication
    private HubConnection? _gameHubConnection;

    // Vote counts for each team
    private int TeamAVotes { get; set; }
    private int TeamBVotes { get; set; }

    // NavigationManager for URL navigation
    [Inject] private NavigationManager Navigation { get; set; } = null!;

    // ======= Minimal setup for testing SignalR connection =======
    protected override async Task OnInitializedAsync()
    {
        // Connect to the SignalR hub
        var gameStateUrl = _nav.ToAbsoluteUri("/tug-game");
        _gameHubConnection = new HubConnectionBuilder()
        .WithUrl(gameStateUrl)
        .WithAutomaticReconnect()
        .WithStatefulReconnect()
        .Build();

        _gameHubConnection.On<TugGameEventArgs>("RecieveGameState", OnGameStateUpdate);

        try
        {
            await _gameHubConnection.StartAsync();
            await _gameHubConnection.InvokeAsync("AddToListenerGroup");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Connection failed: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }

    // Handle game state update from server
    private void OnGameStateUpdate(TugGameEventArgs args)
    {
        TeamAVotes = args.TeamA;
        TeamBVotes = args.TeamB;
        InvokeAsync(StateHasChanged);
    }

    // Stub for voting for Team A
    private async Task VoteTeamA()
    {
        if (_gameHubConnection is not null)
        {
            await _gameHubConnection.InvokeAsync("TugLeft");
        }
    }

    // Stub for voting for Team B
    private async Task VoteTeamB()
    {
        if (_gameHubConnection is not null)
        {
            await _gameHubConnection.InvokeAsync("TugRight");
        }
    }

    // Dispose connection
    public void Dispose()
    {
        if (_gameHubConnection is not null)
        {
            _gameHubConnection.DisposeAsync();
        }
    }
}

<!-- Custom CSS TO BE MOVED ELSEWHERE -->
<style>
    .game-area {
        width: 100%;
        height: 200px;
        background-color: #f0f0f0;
        position: relative;
    }

    .team {
        position: absolute;
        bottom: 0;
    }

    .team-image {
        max-width: 150px;
    }

    .rope-image {
        max-width: 100px;
        position: absolute;
        bottom: 0;
    }

    .voting-buttons {
        margin-top: 2rem;
    }

    .vote-counts {
        font-size: 1.5rem;
    }
</style>

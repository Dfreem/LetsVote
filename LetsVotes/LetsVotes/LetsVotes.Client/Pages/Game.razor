@page "/game"
@using LetsVote.Client.Components
@using LetsVote.Client.Services.Toast
@using LetsVote.Shared.DTO
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@inject NavigationManager _nav
@inject IToastService _toast

<PageTitle>Tug of War Game</PageTitle>

<!-- Team Selection Dropdown -->
<div class="container text-center my-4">
    <label for="teamSelect">Choose your team:</label>
    <select id="teamSelect" @onchange="OnTeamSelected" class="form-control">
        <option value="A" selected="@((PlayerTeam == "A") ? "selected" : null)">Team A</option>
        <option value="B" selected="@((PlayerTeam == "B") ? "selected" : null)">Team B</option>
    </select>
</div>

    <!-- Onkeydown event to capture keypresses -->
<div class="container text-center" @onkeydown="HandleKeyPress" tabindex="0">
        <h1>Voting Game</h1>


    <div class="game-area my-4 position-relative">
        <!-- Team A on the left -->
        <div class="team team-a" style="left:@TeamAStyle;">
            <img src="images/teamA.png" alt="Team A" class="team-image img-fluid" />
            <p>Team A: @TeamAVotes</p>
        </div>

        <!-- Rope in the center -->
        <div class="rope" style="left:@RopeStyle;">
            <img src="images/rope.png" alt="Rope" class="rope-image img-fluid" />
        </div>

        <!-- Team B on the right -->
        <div class="team team-b" style="left:@TeamBStyle;">
            <img src="images/teamB.png" alt="Team B" class="team-image img-fluid" />
            <p>Team B: @TeamBVotes</p>
        </div>
    </div>




    <!-- Monster Attack Section -->
    <div class="monster-area">
        @if (!IsStunned && !IsMonsterDefeated)
        {
            <div class="monster-image" style="left:@(GetMonsterPosition())%;">
                <img src="@MonsterImage" alt="Monster" />
                
            </div>

            @if (ShowDecoyMonster)
            {
                <div class="monster-decoy" style="left:@(GetDecoyPosition())%;">
                    <img src="images/monsterf1.png" alt="Decoy Monster" />
                </div>
            }
        }
        else if (IsStunned)
        {
            <p>You're stunned! Wait for a few seconds...</p>
        }
        else if (IsMonsterDefeated)
        {
            <p>@SuccessMessage</p>
        }
    </div>

    <!-- Monster Fight Button Area -->
    <div class="button-area my-4">
        <button class="btn btn-danger" @onclick='() => ButtonClicked("A")' disabled="@IsStunned">A</button>
        <button class="btn btn-warning" @onclick='() => ButtonClicked("B")' disabled="@IsStunned">B</button>
        <button class="btn btn-success" @onclick='() => ButtonClicked("C")' disabled="@IsStunned">C</button>
    </div>

    <!-- Display the Vote Counts -->
    <div class="vote-counts my-4">
        <p>Team A Votes: @TeamAVotes</p>
        <p>Team B Votes: @TeamBVotes</p>
    </div>
</div>

@code {
    // SignalR Hub connection
    private HubConnection? _gameHubConnection;

    // Vote counts
    private int TeamAVotes { get; set; }
    private int TeamBVotes { get; set; }
    private bool HasVoted { get; set; } = false;

    // Player's team selection
    private string PlayerTeam { get; set; } = "A";

    // Monster variables
    private string MonsterImage { get; set; } = "images/monster.png";
    private string[] MonsterImages = { "images/monster.png", "images/monster2.png" };
    private string CorrectButton { get; set; } = "B";
    private string MonsterMessage { get; set; } = string.Empty;
    private bool IsMonsterDefeated = false;
    private bool IsStunned = false;
    private int StunDuration = 3000;
    private string SuccessMessage { get; set; } = string.Empty;

    // Team and rope position styles
    private string TeamAStyle => $"{20 + PositionOffset}%"; // Moves left as votes shift
    private string RopeStyle => $"{40 + PositionOffset}%"; // Rope should stay at the middle
    private string TeamBStyle => $"{30 + PositionOffset + 25}%"; // Moves right as votes shift



    // Decoy monster variables
    private bool ShowDecoyMonster { get; set; } = false;
    private string DecoyPosition { get; set; } = "0";

    // Monster spawn timer
    private System.Timers.Timer _monsterSpawnTimer;

    private int VoteDifference => TeamAVotes - TeamBVotes;
    private double PositionOffset => -VoteDifference * 1.2;

    protected override async Task OnInitializedAsync()
    {
        // Connect to SignalR hub
        var gameStateUrl = _nav.ToAbsoluteUri("/tug-game");
        _gameHubConnection = new HubConnectionBuilder()
            .WithUrl(gameStateUrl)
            .WithAutomaticReconnect()
            .Build();

        _gameHubConnection.On<TugGameEventArgs>("RecieveGameState", OnGameStateUpdate);

        try
        {
            await _gameHubConnection.StartAsync();
            await _gameHubConnection.InvokeAsync("AddToListenerGroup");

            StartMonsterSpawnTimer();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Connection failed: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }

    private async Task OnTeamSelected(ChangeEventArgs e)
    {
        PlayerTeam = e.Value?.ToString();
        await InvokeAsync(StateHasChanged); // Update UI when the team selection changes
    }





    private void OnGameStateUpdate(TugGameEventArgs args)
    {
        TeamAVotes = args.TeamA;
        TeamBVotes = args.TeamB;
        InvokeAsync(StateHasChanged);
    }

    private void StartMonsterSpawnTimer()
    {
        _monsterSpawnTimer = new System.Timers.Timer(2000); 
        _monsterSpawnTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                RandomizeMonster();
                RandomizeDecoy();
                IsMonsterDefeated = false;
                IsStunned = false;
                SuccessMessage = string.Empty;

                StateHasChanged();
            });
        };

        _monsterSpawnTimer.AutoReset = true;
        _monsterSpawnTimer.Start();
    }

    private async Task ButtonClicked(string button)
    {
        if (IsMonsterDefeated || HasVoted)
        {
            // If monster is already defeated or player has already voted, do nothing
            return;
        }

        if (button == CorrectButton)
        {
            // Correct button clicked, monster defeated
            IsMonsterDefeated = true;
            SuccessMessage = "You successfully struck the monster and got to the ballot box! That's a vote for your candidate!";
            await SubmitVote(); // Only one vote allowed per monster
            HasVoted = true; // Mark that the player has voted
        }
        else
        {
            // Wrong button clicked, player is stunned
            IsStunned = true;
            await Task.Delay(StunDuration);
            IsStunned = false;
        }

        await InvokeAsync(StateHasChanged);
    }



    private void RandomizeMonster()
    {
        HasVoted = false;
        var buttons = new[] { "A", "B", "C" };
        CorrectButton = buttons[new Random().Next(0, buttons.Length)];
        MonsterImage = MonsterImages[new Random().Next(0, MonsterImages.Length)];
        //MonsterMessage = $"A monster appears above button {CorrectButton}!";
    }

    private void RandomizeDecoy()
    {
        ShowDecoyMonster = new Random().Next(0, 3) == 0;

        double monsterPosition = GetMonsterPosition();
        double decoyPosition;

        do
        {
            decoyPosition = new Random().Next(10, 90);
        } 
        while (Math.Abs(decoyPosition - monsterPosition) < 10);

        DecoyPosition = decoyPosition.ToString();

    }

    private double GetMonsterPosition()
    {
        return CorrectButton switch
        {
            "A" => 20, 
            "B" => 50, 
            "C" => 80, 
            _ => 50    
        };
    }

    private double GetDecoyPosition()
    {
        return double.Parse(DecoyPosition);
    }



    /* private async Task ButtonClicked(string button)
    {
        if (button == CorrectButton)
        {
            IsMonsterDefeated = true;
            SuccessMessage = "You successfully struck the monster and got to the ballot box! That's a vote for your candidate!";
            await SubmitVote();
        }
        else
        {
            IsStunned = true;
            await Task.Delay(StunDuration);
            IsStunned = false;
        }
        await InvokeAsync(StateHasChanged);
    } */

    private async Task SubmitVote()
    {
        if (_gameHubConnection is not null)
        {
            if (PlayerTeam == "A")
            {
                await _gameHubConnection.InvokeAsync("TugLeft");
            }
            else if (PlayerTeam == "B")
            {
                await _gameHubConnection.InvokeAsync("TugRight");
            }
        }
    }

    public void Dispose()
    {
        _monsterSpawnTimer?.Stop();
        _monsterSpawnTimer?.Dispose();
        if (_gameHubConnection is not null)
        {
            _gameHubConnection.DisposeAsync();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "a":
                await ButtonClicked("A");
                break;
            case "s":
                await ButtonClicked("B");
                break;
            case "d":
                await ButtonClicked("C");
                break;
        }
    }

}

<!-- Styles -->
<style>
    .game-area {
        position: relative;
        width: 100%;
        height: 200px;
    }

    .team, .rope {
        position: absolute;
        transition: left 0.5s ease-in-out;
    }

        .team img, .rope img {
            width: 100px; 
        }
    .monster-area {
        margin-top: 2rem;
        height: 200px;
        position: relative;
    }

    .monster-image, .monster-decoy {
        position: absolute;
        top: -50px; 
        transition: left 0.5s ease-in-out; 
    }

        .monster-image img, .monster-decoy img {
            max-width: 80px;
        }

    .button-area {
        display: flex;
        justify-content: space-around;
    }

    .vote-counts {
        font-size: 1.5rem;
    }
</style>
